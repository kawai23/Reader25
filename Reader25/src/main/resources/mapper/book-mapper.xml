<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="bookMapper">
	
	<select id="selectList" resultMap="bookResultSet">
		select *
		from book
		where status = 'Y'
		order by BOOK_NO desc
	</select>
	
	<resultMap type="Book" id="bookResultSet">
		<id property="b_no" column="BOOK_NO"/>
		<result property="b_name" column="BOOK_NAME"/>
		<result property="b_price" column="PRICE"/>
		<result property="b_Q1" column="BOOK_Q1"/>
		<result property="b_Q2" column="BOOK_Q2"/>
		<result property="b_Q3" column="BOOK_Q3"/>
		<result property="author" column="AUTHOR"/>
		<result property="b_Status" column="STATUS"/>
		<result property="boardNo" column="BOARD_NO"/>
	</resultMap>
	
	<select id="getPayList" resultType="_int">
		select count(*)
		from pay
		where status = 'N' <!-- 삭제 여부 -->
	</select>
	<select id="selectPayList" resultMap="payResultSet">
		select p.*, book_name, b.user_id as seller
		from pay p
			join book boo on(p.book_no=boo.book_no)
            join board b on(b.board_no=boo.board_no)
		where p.status = 'Y'
		order by pay_no desc
	</select>
	<resultMap type="Pay" id="payResultSet">
		<id property="pay_no" column="PAY_NO"/>
		<result property="book_name" column="BOOK_NAME"/>
		<result property="book_v" column="BOOK_V"/>
		<result property="price" column="PRICE"/>
		<result property="pay_status" column="PAY_STATUS"/>
		<result property="status" column="STATUS"/>
		<result property="pay_date" column="PAY_DATE"/>
		<result property="userId" column="USER_ID"/>
		<result property="book_no" column="BOOK_NO"/>
		<result property="seller" column="seller"/>
	</resultMap>
	
	<select id="selectBookList" resultMap="bookResultSet">
		select *
		from book
		where status = 'Y'
	</select>
	
	<select id="selectBook" resultMap="bookResultSet">
		select *
		from book
		where status = 'Y' and book_no = #{b_no}
	</select>
	<insert id="insertBook">
		insert into book
		values(book_seq.nextval, #{b_name}, #{b_price},#{b_Q1}, #{b_Q2}, null,
			#{author}, default, SYSDATE, seq_bid.currval)
	</insert>
	
	<insert id="insertsb">
		INSERT INTO SHOPPINGBASKET
		VALUES(SEQ_SBNO.nextval, #{sb_v}, #{price}, default, #{user_id}, #{book_no})
	</insert>
	

	
	
	
	<select id="MyBasketListCount"  resultType="_int">
	
		SELECT count( * ) 
		FROM shoppingbasket  LEFT OUTER join book using(BOOK_NO) 
		where  shoppingbasket.status = 'Y' 
		
		
		<if test="mId != null">
 		
 			and USER_ID = #{mId}
 		 </if>

 		
 		<if test="title != null">
 		
 			and BOOK_NAME like '%' || #{title} || '%'
 		
 		</if>
 		
 		<if test="no != null">
 		
 			and SB_NO = #{no} 
 		
 		</if> 
		
		
	
	
	</select>
	
	<select id="MyBasketList" parameterType="SearchCondition" resultType="SB">
 	
 	
 		SELECT * 
		FROM shoppingbasket  LEFT OUTER join book using(BOOK_NO) 
		where  shoppingbasket.status = 'Y' 
 
 		
 		
 		<if test="mId != null">
 		
 			and USER_ID = #{mId}
 		 </if>

 		
 		<if test="title != null">
 		
 			and BOOK_NAME like '%' || #{title} || '%'
 		
 		</if>
 		
 		<if test="no != null">
 		
 			and SB_NO = #{no} 
 		
 		</if> 
 	
 		order by SB_NO desc
 	
 	</select>
	

	<update id="updateBook">
		update book
		set book_name = #{b_name}, price=#{b_price}, book_q1 = #{b_Q1}, book_q2 = #{b_Q2}, book_q3 =#{b_Q3}, author = #{author}
		where book_no = #{b_no}
	</update>
	
	<update id="deleteBook">
		update book
		set status = 'N'
		where book_no = #{b_no}
	</update>

	
	<select id="selectSB" resultType="SB">
		SELECT *
		FROM SHOPPINGBASKET
		WHERE STATUS = 'Y' AND USER_ID = #{userid}
	</select>
	
	
	
	<delete id="BasketDelete">
		DELETE FROM SHOPPINGBASKET
		WHERE SB_NO=#{s} 
    </delete>
	
	<insert id="insertPay">
		INSERT INTO PAY
		VALUES(P_SEQ.nextval, #{book_v}, #{price}, sysdate, default,default,#{userId}, #{book_no})
	</insert>
	
	<select id="selectAutoBookList" resultType="string">
		<if test="book != null">
			select DISTINCT book_name
		</if>
		<if test="author != null">
			select DISTINCT author
		</if>
		from book
		where status = 'Y' 
		<if test="book != null">
			and (book_name like '%'|| UPPER(#{book})||'%') 
			or (book_name like '%' || LOWER(#{book}) ||'%')
		</if>
		<if test="author != null">
			and (author like '%'|| UPPER(#{author})||'%') 
			or (author like '%' || LOWER(#{author}) ||'%')
		</if>
	</select>
	
</mapper>
